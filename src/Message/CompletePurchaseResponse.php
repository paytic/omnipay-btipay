<?php

namespace Paytic\Omnipay\Btipay\Message;

use Paytic\Omnipay\Btipay\Utils\OrderStatus;
use Paytic\Omnipay\Common\Message\Traits\HtmlResponses\ConfirmHtmlTrait;
use Stev\BTIPay\Util\OrderStatuses;

/**
 * Class PurchaseResponse
 * @package ByTIC\Common\Payments\Gateways\Providers\AbstractGateway\Messages
 */
class CompletePurchaseResponse extends AbstractResponse
{
    use ConfirmHtmlTrait;

    public function isSuccessful(): bool
    {
        return OrderStatus::isSuccessful($this->getTransactionStatus());
    }

    /**
     * Is the transaction cancelled by the user?
     *
     * @return boolean
     */
    public function isPending(): bool
    {
        return OrderStatus::isPending($this->getTransactionStatus());
    }

    /**
     * Is the transaction cancelled by the user?
     *
     * @return boolean
     */
    public function isCancelled(): bool
    {
        return OrderStatus::isCancelled($this->getTransactionStatus());
    }

    /**
     * Response Message
     *
     * @return null|string A response message from the payment gateway
     */
    public function getMessage(): ?string
    {
        return data_get($this->getData(), 'notification.actionCodeDescription');
    }

    /**
     * Response code
     *
     * @return null|string A response code from the payment gateway
     */
    public function getCode(): ?string
    {
        return data_get($this->getData(), 'notification.actionCode');
    }

    /**
     * Gateway Reference
     * @return null|string A reference provided by the gateway to represent this transaction
     */
    public function getTransactionReference()
    {
        return data_get($this->getData(), 'notification.orderId');
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        return data_get($this->getData(), 'notification.orderNumber');
    }

    public function getSessionDebug(): array
    {
        return [
            'notification' => $this->getDataProperty('notification'),
        ];
    }

    protected function getTransactionStatus()
    {
        return data_get($this->getData(), 'notification.status');
    }
}
